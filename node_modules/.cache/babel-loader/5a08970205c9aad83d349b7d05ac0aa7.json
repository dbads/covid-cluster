{"ast":null,"code":"var _jsxFileName = \"/Users/dbadsmac/Dev/personal/hexagons/hexagonss/src/components/HexagonCluster.jsx\";\nimport React, { Component } from \"react\";\nimport { Line } from \"draw-shape-reactjs\";\nimport { Form, Input, Row, Button } from \"antd\";\n\nclass HexagonCluster extends Component {\n  constructor(props) {\n    super(props);\n\n    this.createHexagon = (hexagonBorders, hexagonName) => {\n      // console.log(\"creating new hexagon ---\", hexagonBorders, hexagonName);\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: hexagonName,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 7\n        }\n      }, hexagonBorders === null || hexagonBorders === void 0 ? void 0 : hexagonBorders.map((border, index) => {\n        // console.log(border, index, \"---border-- index\");\n        return /*#__PURE__*/React.createElement(Line, {\n          key: `${hexagonName}-${index}`,\n          position: \"fixed\",\n          from: border.from,\n          to: border.to,\n          color: border.colour,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 13\n          }\n        });\n      }));\n    };\n\n    this.getActionInputs = () => {\n      const startX = Number(this.xCordinate.current.input.value);\n      const startY = Number(this.yCordinate.current.input.value);\n      const hexagonToAdd = this.hexagonToAdd.current.input.value;\n      const hexagonToRemove = this.hexagonToRemove.current.input.value;\n      return {\n        startX,\n        startY,\n        hexagonToAdd,\n        hexagonToRemove\n      };\n    };\n\n    this.resetInputs = () => {\n      this.xCordinate.current.input.value = null;\n      this.yCordinate.current.input.value = null;\n      this.hexagonToAdd.current.input.value = null;\n      this.hexagonToRemove.current.input.value = null;\n    };\n\n    this.addHexagon = () => {\n      const {\n        startX,\n        startY,\n        hexagonToAdd\n      } = this.getActionInputs(); // console.log(startX, startY, hexagonToAdd, \"----- hexagon details --\");\n\n      if (startX && startY && hexagonToAdd) {\n        if (!this.state.hexagons[hexagonToAdd]) {\n          const borders = [{\n            from: [startX, startY],\n            to: [startX + 50, startY],\n            colour: \"green\"\n          }, {\n            from: [startX + 50, startY],\n            to: [startX + 100, startY + 50],\n            colour: \"red\"\n          }, {\n            from: [startX + 100, startY + 50],\n            to: [startX + 50, startY + 100],\n            colour: \"yellow\"\n          }, {\n            from: [startX + 50, startY + 100],\n            to: [startX, startY + 100],\n            colour: \"pink\"\n          }, {\n            from: [startX, startY + 100],\n            to: [startX - 50, startY + 50],\n            colour: \"blue\"\n          }, {\n            from: [startX - 50, startY + 50],\n            to: [startX, startY],\n            colour: \"violet\"\n          }]; // console.log(\"-- updating cluster --\");\n\n          const newHexagon = {\n            [hexagonToAdd]: borders\n          };\n          this.setState(state => ({\n            hexagons: { ...state.hexagons,\n              ...newHexagon\n            }\n          })); // console.log(\"-- updated cluster --\", this.state.hexagons);\n        } else {\n          console.log(\"--hexagon already added ---\");\n        }\n      } else {\n        console.log(\"--hexagon details are required ---\");\n      }\n\n      this.resetInputs();\n    };\n\n    this.removeHexagon = () => {\n      const {\n        hexagonToRemove\n      } = this.getActionInputs();\n      console.log(\"-- removing hexagon --\", hexagonToRemove);\n\n      if (hexagonToRemove) {\n        if (this.state.hexagons[hexagonToRemove]) {\n          // eslint-disable-next-line react/no-access-state-in-setstate\n          const {\n            hexagons\n          } = this.state;\n          delete hexagons[hexagonToRemove];\n          console.log(\"newHexagons after removing --\", hexagons);\n          this.setState({\n            hexagons\n          });\n        } else {\n          console.log(\"-- hexagon already removed --\");\n        }\n      } else {\n        console.log(\"--hexagon details are required ---\");\n      }\n\n      this.resetInputs();\n    };\n\n    this.hexagonToAdd = React.createRef();\n    this.hexagonToRemove = React.createRef();\n    this.xCordinate = React.createRef();\n    this.yCordinate = React.createRef();\n    this.state = {\n      hexagons: {}\n    };\n  }\n\n  componentDidMount() {\n    console.log(\"--current hexagon--\", this.state.hexagons); // Object.entries(this.state.hexagons).map((hexagon) => console.log(hexagon[0], hexagon[1], \"---hexagon --\"));\n  }\n\n  componentDidUpdate() {\n    console.log(\"--current hexagon after update--\", this.state.hexagons); // Object.entries(this.state.hexagons).map((hexagon) =>\n    //   console.log(hexagon[0], hexagon[1], \"---hexagon --\")\n    // );\n  }\n\n  createCluster() {\n    var _Object$entries;\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: \"villageCluster\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 7\n      }\n    }, (_Object$entries = Object.entries(this.state.hexagons)) === null || _Object$entries === void 0 ? void 0 : _Object$entries.map(hexagon => this.createHexagon(hexagon[1], hexagon[0])));\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"hexagonCluster\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        color: \"blue\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }\n    }, \" Add/Remove Hexagons \"), this.createCluster(), /*#__PURE__*/React.createElement(Form, {\n      layout: \"vertical\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      key: \"addHexagonInputs\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      placeholder: \"Name of hexagon\",\n      ref: this.hexagonToAdd,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Input, {\n      name: \"statX\",\n      placeholder: \"X coordinate\",\n      ref: this.xCordinate,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Input, {\n      name: \"startY\",\n      placeholder: \"Y coordinate\",\n      ref: this.yCordinate,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      onClick: this.addHexagon,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 13\n      }\n    }, \"Add Hexagon\")), /*#__PURE__*/React.createElement(Row, {\n      key: \"removeHexagonInputs\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      placeholder: \"Name of hexagon\",\n      ref: this.hexagonToRemove,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      onClick: this.removeHexagon,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 13\n      }\n    }, \"Remove Hexagon\"))));\n  }\n\n}\n\nexport default HexagonCluster;\n{\n  /* <Line key=\"0\" position=\"fixed\" from={[100, 100]} to={[150, 100]} color=\"green\" />\n  <Line key=\"1\" position=\"fixed\" from={[150, 100]} to={[200, 150]} color=\"red\" />\n  <Line key=\"2\" position=\"fixed\" from={[200, 150]} to={[150, 200]} color=\"yellow\" />\n  <Line key=\"3\" position=\"fixed\" from={[150, 200]} to={[100, 200]} color=\"pink\" />\n  <Line key=\"4\" position=\"fixed\" from={[100, 200]} to={[50, 150]} color=\"blue\" />\n  <Line key=\"5\" position=\"fixed\" from={[50, 150]} to={[100, 100]} color=\"violet\" /> */\n}","map":{"version":3,"sources":["/Users/dbadsmac/Dev/personal/hexagons/hexagonss/src/components/HexagonCluster.jsx"],"names":["React","Component","Line","Form","Input","Row","Button","HexagonCluster","constructor","props","createHexagon","hexagonBorders","hexagonName","map","border","index","from","to","colour","getActionInputs","startX","Number","xCordinate","current","input","value","startY","yCordinate","hexagonToAdd","hexagonToRemove","resetInputs","addHexagon","state","hexagons","borders","newHexagon","setState","console","log","removeHexagon","createRef","componentDidMount","componentDidUpdate","createCluster","Object","entries","hexagon","render","color"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Line } from \"draw-shape-reactjs\";\nimport { Form, Input, Row, Button } from \"antd\";\n\nclass HexagonCluster extends Component {\n  constructor(props) {\n    super(props);\n    this.hexagonToAdd = React.createRef();\n    this.hexagonToRemove = React.createRef();\n    this.xCordinate = React.createRef();\n    this.yCordinate = React.createRef();\n    this.state = {\n      hexagons: {},\n    };\n  }\n\n  componentDidMount() {\n    console.log(\"--current hexagon--\", this.state.hexagons);\n    // Object.entries(this.state.hexagons).map((hexagon) => console.log(hexagon[0], hexagon[1], \"---hexagon --\"));\n  }\n\n  componentDidUpdate() {\n    console.log(\"--current hexagon after update--\", this.state.hexagons);\n    // Object.entries(this.state.hexagons).map((hexagon) =>\n    //   console.log(hexagon[0], hexagon[1], \"---hexagon --\")\n    // );\n  }\n\n  createHexagon = (hexagonBorders, hexagonName) => {\n    // console.log(\"creating new hexagon ---\", hexagonBorders, hexagonName);\n    return (\n      <div key={hexagonName}>\n        {hexagonBorders?.map((border, index) => {\n          // console.log(border, index, \"---border-- index\");\n          return (\n            <Line\n              key={`${hexagonName}-${index}`}\n              position=\"fixed\"\n              from={border.from}\n              to={border.to}\n              color={border.colour}\n            />\n          );\n        })}\n      </div>\n    );\n  };\n\n  getActionInputs = () => {\n    const startX = Number(this.xCordinate.current.input.value);\n    const startY = Number(this.yCordinate.current.input.value);\n    const hexagonToAdd = this.hexagonToAdd.current.input.value;\n    const hexagonToRemove = this.hexagonToRemove.current.input.value;\n\n    return { startX, startY, hexagonToAdd, hexagonToRemove };\n  };\n\n  resetInputs = () => {\n    this.xCordinate.current.input.value = null;\n    this.yCordinate.current.input.value = null;\n    this.hexagonToAdd.current.input.value = null;\n    this.hexagonToRemove.current.input.value = null;\n  };\n\n  addHexagon = () => {\n    const { startX, startY, hexagonToAdd } = this.getActionInputs();\n\n    // console.log(startX, startY, hexagonToAdd, \"----- hexagon details --\");\n\n    if (startX && startY && hexagonToAdd) {\n      if (!this.state.hexagons[hexagonToAdd]) {\n        const borders = [\n          { from: [startX, startY], to: [startX + 50, startY], colour: \"green\" },\n          { from: [startX + 50, startY], to: [startX + 100, startY + 50], colour: \"red\" },\n          { from: [startX + 100, startY + 50], to: [startX + 50, startY + 100], colour: \"yellow\" },\n          { from: [startX + 50, startY + 100], to: [startX, startY + 100], colour: \"pink\" },\n          { from: [startX, startY + 100], to: [startX - 50, startY + 50], colour: \"blue\" },\n          { from: [startX - 50, startY + 50], to: [startX, startY], colour: \"violet\" },\n        ];\n        // console.log(\"-- updating cluster --\");\n        const newHexagon = { [hexagonToAdd]: borders };\n        this.setState((state) => ({ hexagons: { ...state.hexagons, ...newHexagon } }));\n        // console.log(\"-- updated cluster --\", this.state.hexagons);\n      } else {\n        console.log(\"--hexagon already added ---\");\n      }\n    } else {\n      console.log(\"--hexagon details are required ---\");\n    }\n\n    this.resetInputs();\n  };\n\n  removeHexagon = () => {\n    const { hexagonToRemove } = this.getActionInputs();\n    console.log(\"-- removing hexagon --\", hexagonToRemove);\n    if (hexagonToRemove) {\n      if (this.state.hexagons[hexagonToRemove]) {\n        // eslint-disable-next-line react/no-access-state-in-setstate\n        const { hexagons } = this.state;\n        delete hexagons[hexagonToRemove];\n        console.log(\"newHexagons after removing --\", hexagons);\n        this.setState({ hexagons });\n      } else {\n        console.log(\"-- hexagon already removed --\");\n      }\n    } else {\n      console.log(\"--hexagon details are required ---\");\n    }\n\n    this.resetInputs();\n  };\n\n  createCluster() {\n    return (\n      <div key=\"villageCluster\">\n        {Object.entries(this.state.hexagons)?.map((hexagon) =>\n          this.createHexagon(hexagon[1], hexagon[0])\n        )}\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"hexagonCluster\">\n        <span style={{ color: \"blue\" }}> Add/Remove Hexagons </span>\n        {this.createCluster()}\n\n        <Form layout=\"vertical\">\n          <Row key=\"addHexagonInputs\">\n            <Input placeholder=\"Name of hexagon\" ref={this.hexagonToAdd} />\n            <Input name=\"statX\" placeholder=\"X coordinate\" ref={this.xCordinate} />\n            <Input name=\"startY\" placeholder=\"Y coordinate\" ref={this.yCordinate} />\n            <Button onClick={this.addHexagon}>Add Hexagon</Button>\n          </Row>\n          <Row key=\"removeHexagonInputs\">\n            <Input placeholder=\"Name of hexagon\" ref={this.hexagonToRemove} />\n            <Button onClick={this.removeHexagon}>Remove Hexagon</Button>\n          </Row>\n        </Form>\n      </div>\n    );\n  }\n}\n\nexport default HexagonCluster;\n\n{\n/* <Line key=\"0\" position=\"fixed\" from={[100, 100]} to={[150, 100]} color=\"green\" />\n<Line key=\"1\" position=\"fixed\" from={[150, 100]} to={[200, 150]} color=\"red\" />\n<Line key=\"2\" position=\"fixed\" from={[200, 150]} to={[150, 200]} color=\"yellow\" />\n<Line key=\"3\" position=\"fixed\" from={[150, 200]} to={[100, 200]} color=\"pink\" />\n<Line key=\"4\" position=\"fixed\" from={[100, 200]} to={[50, 150]} color=\"blue\" />\n<Line key=\"5\" position=\"fixed\" from={[50, 150]} to={[100, 100]} color=\"violet\" /> */\n}\n"]},"metadata":{},"sourceType":"module"}