{"ast":null,"code":"var _jsxFileName = \"/Users/dbadsmac/Dev/personal/hexagons/hexagonss/src/components/HexagonCluster.jsx\";\nimport React, { Component } from \"react\";\nimport { Line } from \"draw-shape-reactjs\";\nimport { Form, Input, Row, Button } from \"antd\";\n\nclass HexagonCluster extends Component {\n  constructor(props) {\n    super(props);\n\n    this.createHexagon = (hexagonBorders, hexagonName) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: hexagonName,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 7\n        }\n      }, hexagonBorders.map((border, index) => /*#__PURE__*/React.createElement(Line, {\n        key: `${hexagonName}-${index}`,\n        position: \"fixed\",\n        from: border.from,\n        to: border.to,\n        color: border.colour,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 11\n        }\n      })));\n    };\n\n    this.addHexagon = () => {\n      // console.log(this.state.hexagonName, \"=====hexagone name ----\");\n      // console.log(\n      //   this.state.hexagonName,\n      //   this.state.startX,\n      //   this.state.startY,\n      //   \"----- hexagone details received ---\"\n      // );\n      const startX = this.xCordinate.current.input.value;\n      const startY = this.yCordinate.current.input.value;\n      const hexagonToAdd = this.hexagonToAdd.current.input.value;\n      console.log(startX, startY, hexagonToAdd, \"----- hexagone details --\");\n\n      if (startX && startY && hexagonToAdd) {\n        const borders = [{\n          from: [startX, startY],\n          to: [startX + 50, startY],\n          colour: \"green\"\n        }, {\n          from: [startX + 50, startY],\n          to: [startX + 100, startY + 50],\n          colour: \"red\"\n        }, {\n          from: [startX + 100, startY + 50],\n          to: [startX + 50, startY + 100],\n          colour: \"yellow\"\n        }, {\n          from: [startX + 50, startY + 100],\n          to: [startX, startY + 100],\n          colour: \"pink\"\n        }, {\n          from: [startX, startY + 100],\n          to: [startX - 50, startY + 50],\n          colour: \"blue\"\n        }, {\n          from: [startX - 50, startY + 50],\n          to: [startX, startY],\n          colour: \"violet\"\n        }];\n        console.log(\"-- updating cluster --\");\n        const newHexagon = {\n          [hexagonToAdd]: borders\n        };\n        console.log(newHexagon, \"--newHexagon ----\", { ...this.state.hexagons,\n          ...newHexagon\n        });\n        const updatedHexagon = { ...this.state.hexagons,\n          ...newHexagon\n        };\n        this.setState({\n          hexagons: updatedHexagon\n        }); // this.setState((state) => ({ hexagons: { ...state.hexagons, ...newHexagon } }));\n        // console.log(\"-- updated cluster --\", this.state.hexagons);\n      } else {\n        console.log(\"--hexagon details are required ---\");\n      }\n    };\n\n    this.removeHexagon = () => {\n      console.log(\"-- removing hexagon --\", this.state.hexagonName);\n    };\n\n    this.hexagonToAdd = React.createRef();\n    this.hexagonToRemove = React.createRef();\n    this.xCordinate = React.createRef();\n    this.yCordinate = React.createRef();\n    this.state = {\n      hexagons: {}\n    };\n  }\n\n  componentDidMount() {\n    console.log(\"--current hexagon--\", this.state.hexagons);\n    Object.entries(this.state.hexagons).map(hexagon => console.log(hexagon, \"---hexagon --\"));\n  }\n\n  componentDidUpdate() {\n    console.log(\"--current hexagon after update--\", this.state.hexagons);\n    Object.entries(this.state.hexagons).map(hexagon => console.log(hexagon, \"---hexagon --\"));\n  }\n\n  createCluster() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: \"villageCluster\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 7\n      }\n    }, Object.entries(this.state.hexagons).map(hexagon => this.createHexagon(hexagon[1], hexagon[0])));\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        color: \"blue\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }\n    }, \" Hi There \"), this.createCluster(), /*#__PURE__*/React.createElement(Form, {\n      layout: \"vertical\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      placeholder: \"Name of hexagon\",\n      ref: this.hexagonToAdd,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Input, {\n      name: \"statX\",\n      placeholder: \"X coordinate\",\n      ref: this.xCordinate,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Input, {\n      name: \"startY\",\n      placeholder: \"Y coordinate\",\n      ref: this.yCordinate,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      onClick: this.addHexagon,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 13\n      }\n    }, \"Add Hexagon\")), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      placeholder: \"Name of hexagon\",\n      ref: this.hexagonToRemove,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      onClick: this.removeHexagon,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 13\n      }\n    }, \"Remove Hexagon\"))));\n  }\n\n}\n\nexport default HexagonCluster;","map":{"version":3,"sources":["/Users/dbadsmac/Dev/personal/hexagons/hexagonss/src/components/HexagonCluster.jsx"],"names":["React","Component","Line","Form","Input","Row","Button","HexagonCluster","constructor","props","createHexagon","hexagonBorders","hexagonName","map","border","index","from","to","colour","addHexagon","startX","xCordinate","current","input","value","startY","yCordinate","hexagonToAdd","console","log","borders","newHexagon","state","hexagons","updatedHexagon","setState","removeHexagon","createRef","hexagonToRemove","componentDidMount","Object","entries","hexagon","componentDidUpdate","createCluster","render","color"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Line } from \"draw-shape-reactjs\";\nimport { Form, Input, Row, Button } from \"antd\";\n\nclass HexagonCluster extends Component {\n  constructor(props) {\n    super(props);\n    this.hexagonToAdd = React.createRef();\n    this.hexagonToRemove = React.createRef();\n    this.xCordinate = React.createRef();\n    this.yCordinate = React.createRef();\n\n    this.state = {\n      hexagons: {},\n    };\n  }\n\n  componentDidMount() {\n    console.log(\"--current hexagon--\", this.state.hexagons);\n    Object.entries(this.state.hexagons).map((hexagon) => console.log(hexagon, \"---hexagon --\"));\n  }\n\n  componentDidUpdate() {\n    console.log(\"--current hexagon after update--\", this.state.hexagons);\n    Object.entries(this.state.hexagons).map((hexagon) => console.log(hexagon, \"---hexagon --\"));\n  }\n\n  createHexagon = (hexagonBorders, hexagonName) => {\n    return (\n      <div key={hexagonName}>\n        {hexagonBorders.map((border, index) => (\n          <Line\n            key={`${hexagonName}-${index}`}\n            position=\"fixed\"\n            from={border.from}\n            to={border.to}\n            color={border.colour}\n          />\n        ))}\n      </div>\n    );\n  };\n\n  addHexagon = () => {\n    // console.log(this.state.hexagonName, \"=====hexagone name ----\");\n    // console.log(\n    //   this.state.hexagonName,\n    //   this.state.startX,\n    //   this.state.startY,\n    //   \"----- hexagone details received ---\"\n    // );\n\n    const startX = this.xCordinate.current.input.value;\n    const startY = this.yCordinate.current.input.value;\n    const hexagonToAdd = this.hexagonToAdd.current.input.value;\n\n    console.log(startX, startY, hexagonToAdd, \"----- hexagone details --\");\n    if (startX && startY && hexagonToAdd) {\n      const borders = [\n        { from: [startX, startY], to: [startX + 50, startY], colour: \"green\" },\n        { from: [startX + 50, startY], to: [startX + 100, startY + 50], colour: \"red\" },\n        { from: [startX + 100, startY + 50], to: [startX + 50, startY + 100], colour: \"yellow\" },\n        { from: [startX + 50, startY + 100], to: [startX, startY + 100], colour: \"pink\" },\n        { from: [startX, startY + 100], to: [startX - 50, startY + 50], colour: \"blue\" },\n        { from: [startX - 50, startY + 50], to: [startX, startY], colour: \"violet\" },\n      ];\n      console.log(\"-- updating cluster --\");\n      const newHexagon = { [hexagonToAdd]: borders };\n      console.log(newHexagon, \"--newHexagon ----\", { ...this.state.hexagons, ...newHexagon });\n      const updatedHexagon = { ...this.state.hexagons, ...newHexagon };\n      this.setState({ hexagons: updatedHexagon });\n      // this.setState((state) => ({ hexagons: { ...state.hexagons, ...newHexagon } }));\n      // console.log(\"-- updated cluster --\", this.state.hexagons);\n    }\n    else {\n      console.log(\"--hexagon details are required ---\");\n    }\n  };\n\n  removeHexagon = () => {\n    console.log(\"-- removing hexagon --\", this.state.hexagonName);\n  };\n\n  createCluster() {\n    return (\n      <div key=\"villageCluster\">\n        {Object.entries(this.state.hexagons).map((hexagon) =>\n          this.createHexagon(hexagon[1], hexagon[0])\n        )}\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        <span style={{ color: \"blue\" }}> Hi There </span>\n        {/* <Line key=\"0\" position=\"fixed\" from={[100, 100]} to={[150, 100]} color=\"green\" />\n        <Line key=\"1\" position=\"fixed\" from={[150, 100]} to={[200, 150]} color=\"red\" />\n        <Line key=\"2\" position=\"fixed\" from={[200, 150]} to={[150, 200]} color=\"yellow\" />\n        <Line key=\"3\" position=\"fixed\" from={[150, 200]} to={[100, 200]} color=\"pink\" />\n        <Line key=\"4\" position=\"fixed\" from={[100, 200]} to={[50, 150]} color=\"blue\" />\n        <Line key=\"5\" position=\"fixed\" from={[50, 150]} to={[100, 100]} color=\"violet\" /> */}\n        {/* {this.createHexagon({ startX: 100, startY: 100 })} */}\n\n        {this.createCluster()}\n\n        <Form layout=\"vertical\">\n          <Row>\n            <Input placeholder=\"Name of hexagon\" ref={this.hexagonToAdd} />\n            <Input name=\"statX\" placeholder=\"X coordinate\" ref={this.xCordinate} />\n            <Input name=\"startY\" placeholder=\"Y coordinate\" ref={this.yCordinate} />\n            <Button onClick={this.addHexagon}>Add Hexagon</Button>\n          </Row>\n          <Row>\n            <Input placeholder=\"Name of hexagon\" ref={this.hexagonToRemove} />\n            <Button onClick={this.removeHexagon}>Remove Hexagon</Button>\n          </Row>\n        </Form>\n      </div>\n    );\n  }\n}\n\nexport default HexagonCluster;\n"]},"metadata":{},"sourceType":"module"}