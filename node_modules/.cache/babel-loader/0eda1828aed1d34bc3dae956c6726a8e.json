{"ast":null,"code":"var _jsxFileName = \"/Users/dbadsmac/Dev/personal/hexagons/hexagonss/src/components/HexagonCluster.jsx\";\nimport React, { Component } from \"react\";\nimport { Line } from \"draw-shape-reactjs\";\nimport { Form, Input, Row, Button } from \"antd\";\n\nclass HexagonCluster extends Component {\n  constructor(props) {\n    super(props);\n\n    this.createHexagon = (hexagon, hexagonIndex) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: hexagonIndex,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 7\n        }\n      }, hexagon.map((border, index) => /*#__PURE__*/React.createElement(Line, {\n        key: `${hexagonIndex}-${index}`,\n        position: \"fixed\",\n        from: border.from,\n        to: border.to,\n        color: border.colour,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 11\n        }\n      })));\n    };\n\n    this.addHexagon = () => {\n      // console.log(this.state.hexagonName, \"=====hexagone name ----\");\n      console.log(this.state.hexagonName, this.state.startX, this.state.startY, \"----- hexagone details received ---\");\n      const {\n        startX,\n        startY\n      } = this.state.hexagonName;\n      const borders = [{\n        from: [startX, startY],\n        to: [startX + 50, startY],\n        colour: \"green\"\n      }, {\n        from: [startX + 50, startY],\n        to: [startX + 100, startY + 50],\n        colour: \"red\"\n      }, {\n        from: [startX + 100, startY + 50],\n        to: [startX + 50, startY + 100],\n        colour: \"yellow\"\n      }, {\n        from: [startX + 50, startY + 100],\n        to: [startX, startY + 100],\n        colour: \"pink\"\n      }, {\n        from: [startX, startY + 100],\n        to: [startX - 50, startY + 50],\n        colour: \"blue\"\n      }, {\n        from: [startX - 50, startY + 50],\n        to: [startX, startY],\n        colour: \"violet\"\n      }];\n      console.log(\"-- updating cluster --\");\n      const newHexagon = {\n        [this.state.hexagonName]: borders\n      };\n      this.setState(state => ({\n        hexagons: { ...state.hexagons,\n          ...newHexagon\n        }\n      }));\n    };\n\n    this.removeHexagon = () => {\n      console.log(\"-- removing hexagon --\", this.state.hexagonName);\n    };\n\n    this.state = {\n      startX: 100,\n      startY: 100,\n      hexagonName: \"\",\n      hexagons: {}\n    };\n  }\n\n  createCluster() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: \"villageCluster\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 7\n      }\n    }, Object.entries(this.state.hexagons).map(hexagon => this.createHexagon(hexagon, index)));\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        color: \"blue\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }\n    }, \" Hi There \"), this.createCluster(), /*#__PURE__*/React.createElement(Form, {\n      layout: \"vertical\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      placeholder: \"Name of hexagon\",\n      onChange: event => this.setState({\n        hexagonName: event.target.value\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Input, {\n      name: \"statX\",\n      placeholder: \"X coordinate\",\n      onChange: val => this.setState({\n        startX: val\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Input, {\n      name: \"startY\",\n      placeholder: \"Y coordinate\",\n      onChange: val => this.setState({\n        startY: val\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      onClick: this.addHexagon,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 13\n      }\n    }, \"Add Hexagon\")), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      placeholder: \"Name of hexagon\",\n      onChange: event => this.setState({\n        hexagonName: event.target.value\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      onClick: this.removeHexagon,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 13\n      }\n    }, \"Remove Hexagon\"))));\n  }\n\n}\n\nexport default HexagonCluster;","map":{"version":3,"sources":["/Users/dbadsmac/Dev/personal/hexagons/hexagonss/src/components/HexagonCluster.jsx"],"names":["React","Component","Line","Form","Input","Row","Button","HexagonCluster","constructor","props","createHexagon","hexagon","hexagonIndex","map","border","index","from","to","colour","addHexagon","console","log","state","hexagonName","startX","startY","borders","newHexagon","setState","hexagons","removeHexagon","createCluster","Object","entries","render","color","event","target","value","val"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Line } from \"draw-shape-reactjs\";\nimport { Form, Input, Row, Button } from \"antd\";\n\nclass HexagonCluster extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      startX: 100,\n      startY: 100,\n      hexagonName: \"\",\n      hexagons: {},\n    };\n  }\n\n  createHexagon = (hexagon, hexagonIndex) => {\n    return (\n      <div key={hexagonIndex}>\n        {hexagon.map((border, index) => (\n          <Line\n            key={`${hexagonIndex}-${index}`}\n            position=\"fixed\"\n            from={border.from}\n            to={border.to}\n            color={border.colour}\n          />\n        ))}\n      </div>\n    );\n  };\n\n  addHexagon = () => {\n    // console.log(this.state.hexagonName, \"=====hexagone name ----\");\n    console.log(\n      this.state.hexagonName,\n      this.state.startX,\n      this.state.startY,\n      \"----- hexagone details received ---\"\n    );\n    const { startX, startY } = this.state.hexagonName;\n    const borders = [\n      { from: [startX, startY], to: [startX + 50, startY], colour: \"green\" },\n      { from: [startX + 50, startY], to: [startX + 100, startY + 50], colour: \"red\" },\n      { from: [startX + 100, startY + 50], to: [startX + 50, startY + 100], colour: \"yellow\" },\n      { from: [startX + 50, startY + 100], to: [startX, startY + 100], colour: \"pink\" },\n      { from: [startX, startY + 100], to: [startX - 50, startY + 50], colour: \"blue\" },\n      { from: [startX - 50, startY + 50], to: [startX, startY], colour: \"violet\" },\n    ];\n    console.log(\"-- updating cluster --\");\n    const newHexagon = { [this.state.hexagonName]: borders };\n    this.setState((state) => ({ hexagons: { ...state.hexagons, ...newHexagon } }));\n  };\n\n  removeHexagon = () => {\n    console.log(\"-- removing hexagon --\", this.state.hexagonName);\n  };\n\n  createCluster() {\n    return (\n      <div key=\"villageCluster\">\n        {Object.entries(this.state.hexagons).map((hexagon, ) => this.createHexagon(hexagon, index))}\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        <span style={{ color: \"blue\" }}> Hi There </span>\n        {/* <Line key=\"0\" position=\"fixed\" from={[100, 100]} to={[150, 100]} color=\"green\" />\n        <Line key=\"1\" position=\"fixed\" from={[150, 100]} to={[200, 150]} color=\"red\" />\n        <Line key=\"2\" position=\"fixed\" from={[200, 150]} to={[150, 200]} color=\"yellow\" />\n        <Line key=\"3\" position=\"fixed\" from={[150, 200]} to={[100, 200]} color=\"pink\" />\n        <Line key=\"4\" position=\"fixed\" from={[100, 200]} to={[50, 150]} color=\"blue\" />\n        <Line key=\"5\" position=\"fixed\" from={[50, 150]} to={[100, 100]} color=\"violet\" /> */}\n        {/* {this.createHexagon({ startX: 100, startY: 100 })} */}\n\n        {this.createCluster()}\n\n        <Form layout=\"vertical\">\n          <Row>\n            <Input\n              placeholder=\"Name of hexagon\"\n              onChange={(event) => this.setState({ hexagonName: event.target.value })}\n            />\n            <Input\n              name=\"statX\"\n              placeholder=\"X coordinate\"\n              onChange={(val) => this.setState({ startX: val })}\n            />\n            <Input\n              name=\"startY\"\n              placeholder=\"Y coordinate\"\n              onChange={(val) => this.setState({ startY: val })}\n            />\n            <Button onClick={this.addHexagon}>Add Hexagon</Button>\n          </Row>\n          <Row>\n            <Input\n              placeholder=\"Name of hexagon\"\n              onChange={(event) => this.setState({ hexagonName: event.target.value })}\n            />\n            <Button onClick={this.removeHexagon}>Remove Hexagon</Button>\n          </Row>\n        </Form>\n      </div>\n    );\n  }\n}\n\nexport default HexagonCluster;\n"]},"metadata":{},"sourceType":"module"}