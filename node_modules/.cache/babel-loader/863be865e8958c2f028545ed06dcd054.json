{"ast":null,"code":"var _jsxFileName = \"/Users/dbadsmac/Dev/personal/hexagons/hexagonss/src/components/HexagonCluster.jsx\";\nimport React, { Component } from \"react\";\nimport { Line } from \"draw-shape-reactjs\";\nimport { Form, Input, Row, Button } from \"antd\";\n\nclass HexagonCluster extends Component {\n  constructor(props) {\n    super(props);\n\n    this.createHexagon = (hexagonBorders, hexagonName) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: hexagonName,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 7\n        }\n      }, hexagonBorders.map((border, index) => /*#__PURE__*/React.createElement(Line, {\n        key: `${hexagonName}-${index}`,\n        position: \"fixed\",\n        from: border.from,\n        to: border.to,\n        color: border.colour,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 11\n        }\n      })));\n    };\n\n    this.addHexagon = () => {\n      // console.log(this.state.hexagonName, \"=====hexagone name ----\");\n      // console.log(\n      //   this.state.hexagonName,\n      //   this.state.startX,\n      //   this.state.startY,\n      //   \"----- hexagone details received ---\"\n      // );\n      const {\n        startX,\n        startY,\n        hexagonName\n      } = this.state;\n\n      if (startX && startY && hexagonName) {\n        const borders = [{\n          from: [startX, startY],\n          to: [startX + 50, startY],\n          colour: \"green\"\n        }, {\n          from: [startX + 50, startY],\n          to: [startX + 100, startY + 50],\n          colour: \"red\"\n        }, {\n          from: [startX + 100, startY + 50],\n          to: [startX + 50, startY + 100],\n          colour: \"yellow\"\n        }, {\n          from: [startX + 50, startY + 100],\n          to: [startX, startY + 100],\n          colour: \"pink\"\n        }, {\n          from: [startX, startY + 100],\n          to: [startX - 50, startY + 50],\n          colour: \"blue\"\n        }, {\n          from: [startX - 50, startY + 50],\n          to: [startX, startY],\n          colour: \"violet\"\n        }];\n        console.log(\"-- updating cluster --\");\n        const newHexagon = {\n          [hexagonName]: borders\n        };\n        this.setState(state => ({\n          hexagons: { ...state.hexagons,\n            ...newHexagon\n          }\n        }));\n      } else {\n        console.log(\"--hexagon details are required ---\");\n      }\n    };\n\n    this.removeHexagon = () => {\n      console.log(\"-- removing hexagon --\", this.state.hexagonName);\n    };\n\n    this.hexagonToAdd = React.createRef();\n    this.hexagonToAdd = React.createRef();\n    this.hexagonToAdd = React.createRef();\n    this.state = {\n      startX: 100,\n      startY: 100,\n      hexagonName: \"\",\n      hexagons: {}\n    };\n  }\n\n  componentDidMount() {\n    console.log(\"--current hexagon--\", this.state.hexagons);\n    Object.entries(this.state.hexagons).map(hexagon => {\n      console.log(hexagon, \"---hexagon --\");\n      return this.createHexagon(hexagon[1], hexagon[0]);\n    });\n  }\n\n  componentDidUpdate() {\n    console.log(\"--current hexagon after update--\", this.state.hexagons);\n    Object.entries(this.state.hexagons).map(hexagon => {\n      console.log(hexagon, \"---hexagon --\");\n      return this.createHexagon(hexagon[1], hexagon[0]);\n    });\n  }\n\n  createCluster() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: \"villageCluster\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 7\n      }\n    }, Object.entries(this.state.hexagons).map(hexagon => this.createHexagon(hexagon[1], hexagon[0])));\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        color: \"blue\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }\n    }, \" Hi There \"), this.createCluster(), /*#__PURE__*/React.createElement(Form, {\n      layout: \"vertical\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      placeholder: \"Name of hexagon\",\n      onChange: event => this.setState({\n        hexagonName: event.target.value\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Input, {\n      name: \"statX\",\n      placeholder: \"X coordinate\",\n      onChange: val => this.setState({\n        startX: val\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Input, {\n      name: \"startY\",\n      placeholder: \"Y coordinate\",\n      onChange: val => this.setState({\n        startY: val\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      onClick: this.addHexagon,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 13\n      }\n    }, \"Add Hexagon\")), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      placeholder: \"Name of hexagon\",\n      onChange: event => this.setState({\n        hexagonName: event.target.value\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      onClick: this.removeHexagon,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 13\n      }\n    }, \"Remove Hexagon\"))));\n  }\n\n}\n\nexport default HexagonCluster;","map":{"version":3,"sources":["/Users/dbadsmac/Dev/personal/hexagons/hexagonss/src/components/HexagonCluster.jsx"],"names":["React","Component","Line","Form","Input","Row","Button","HexagonCluster","constructor","props","createHexagon","hexagonBorders","hexagonName","map","border","index","from","to","colour","addHexagon","startX","startY","state","borders","console","log","newHexagon","setState","hexagons","removeHexagon","hexagonToAdd","createRef","componentDidMount","Object","entries","hexagon","componentDidUpdate","createCluster","render","color","event","target","value","val"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Line } from \"draw-shape-reactjs\";\nimport { Form, Input, Row, Button } from \"antd\";\n\nclass HexagonCluster extends Component {\n  constructor(props) {\n    super(props);\n    this.hexagonToAdd = React.createRef();\n    this.hexagonToAdd = React.createRef();\n    this.hexagonToAdd = React.createRef();\n    this.state = {\n      startX: 100,\n      startY: 100,\n      hexagonName: \"\",\n      hexagons: {},\n    };\n  }\n\n  componentDidMount() {\n    console.log(\"--current hexagon--\", this.state.hexagons);\n    Object.entries(this.state.hexagons).map((hexagon) => {\n      console.log(hexagon, \"---hexagon --\");\n      return this.createHexagon(hexagon[1], hexagon[0]);\n    });\n  }\n\n  componentDidUpdate() {\n    console.log(\"--current hexagon after update--\", this.state.hexagons);\n    Object.entries(this.state.hexagons).map((hexagon) => {\n      console.log(hexagon, \"---hexagon --\");\n      return this.createHexagon(hexagon[1], hexagon[0]);\n    });\n  }\n\n  createHexagon = (hexagonBorders, hexagonName) => {\n    return (\n      <div key={hexagonName}>\n        {hexagonBorders.map((border, index) => (\n          <Line\n            key={`${hexagonName}-${index}`}\n            position=\"fixed\"\n            from={border.from}\n            to={border.to}\n            color={border.colour}\n          />\n        ))}\n      </div>\n    );\n  };\n\n  addHexagon = () => {\n    // console.log(this.state.hexagonName, \"=====hexagone name ----\");\n    // console.log(\n    //   this.state.hexagonName,\n    //   this.state.startX,\n    //   this.state.startY,\n    //   \"----- hexagone details received ---\"\n    // );\n    const { startX, startY, hexagonName } = this.state;\n    if (startX && startY && hexagonName) {\n      const borders = [\n        { from: [startX, startY], to: [startX + 50, startY], colour: \"green\" },\n        { from: [startX + 50, startY], to: [startX + 100, startY + 50], colour: \"red\" },\n        { from: [startX + 100, startY + 50], to: [startX + 50, startY + 100], colour: \"yellow\" },\n        { from: [startX + 50, startY + 100], to: [startX, startY + 100], colour: \"pink\" },\n        { from: [startX, startY + 100], to: [startX - 50, startY + 50], colour: \"blue\" },\n        { from: [startX - 50, startY + 50], to: [startX, startY], colour: \"violet\" },\n      ];\n      console.log(\"-- updating cluster --\");\n      const newHexagon = { [hexagonName]: borders };\n      this.setState((state) => ({ hexagons: { ...state.hexagons, ...newHexagon } }));\n    }\n    else {\n      console.log(\"--hexagon details are required ---\");\n    }\n  };\n\n  removeHexagon = () => {\n    console.log(\"-- removing hexagon --\", this.state.hexagonName);\n  };\n\n  createCluster() {\n    return (\n      <div key=\"villageCluster\">\n        {Object.entries(this.state.hexagons).map((hexagon) =>\n          this.createHexagon(hexagon[1], hexagon[0])\n        )}\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        <span style={{ color: \"blue\" }}> Hi There </span>\n        {/* <Line key=\"0\" position=\"fixed\" from={[100, 100]} to={[150, 100]} color=\"green\" />\n        <Line key=\"1\" position=\"fixed\" from={[150, 100]} to={[200, 150]} color=\"red\" />\n        <Line key=\"2\" position=\"fixed\" from={[200, 150]} to={[150, 200]} color=\"yellow\" />\n        <Line key=\"3\" position=\"fixed\" from={[150, 200]} to={[100, 200]} color=\"pink\" />\n        <Line key=\"4\" position=\"fixed\" from={[100, 200]} to={[50, 150]} color=\"blue\" />\n        <Line key=\"5\" position=\"fixed\" from={[50, 150]} to={[100, 100]} color=\"violet\" /> */}\n        {/* {this.createHexagon({ startX: 100, startY: 100 })} */}\n\n        {this.createCluster()}\n\n        <Form layout=\"vertical\">\n          <Row>\n            <Input\n              placeholder=\"Name of hexagon\"\n              onChange={(event) => this.setState({ hexagonName: event.target.value })}\n            />\n            <Input\n              name=\"statX\"\n              placeholder=\"X coordinate\"\n              onChange={(val) => this.setState({ startX: val })}\n            />\n            <Input\n              name=\"startY\"\n              placeholder=\"Y coordinate\"\n              onChange={(val) => this.setState({ startY: val })}\n            />\n            <Button onClick={this.addHexagon}>Add Hexagon</Button>\n          </Row>\n          <Row>\n            <Input\n              placeholder=\"Name of hexagon\"\n              onChange={(event) => this.setState({ hexagonName: event.target.value })}\n            />\n            <Button onClick={this.removeHexagon}>Remove Hexagon</Button>\n          </Row>\n        </Form>\n      </div>\n    );\n  }\n}\n\nexport default HexagonCluster;\n"]},"metadata":{},"sourceType":"module"}