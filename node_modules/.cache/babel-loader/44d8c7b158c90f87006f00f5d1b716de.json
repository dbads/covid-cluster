{"ast":null,"code":"var _jsxFileName = \"/Users/dbadsmac/Dev/personal/hexagons/hexagonss/src/components/HexagonCluster.jsx\";\nimport React, { Component } from \"react\";\nimport { Line } from \"draw-shape-reactjs\";\nimport { Form, Input, Row, Button } from \"antd\";\n\nclass HexagonCluster extends Component {\n  constructor(props) {\n    super(props);\n\n    this.createHexagon = (hexagonBorders, hexagonName) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: hexagonName,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 7\n        }\n      }, hexagonBorders.map((border, index) => /*#__PURE__*/React.createElement(Line, {\n        key: `${hexagonName}-${index}`,\n        position: \"fixed\",\n        from: border.from,\n        to: border.to,\n        color: border.colour,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 11\n        }\n      })));\n    };\n\n    this.removeHexagon = event => {\n      console.log(\"-- removing hexagon --\", event);\n    };\n\n    this.createCluster = () => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: \"villageCluster\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 7\n        }\n      }, Object.entries(this.state.hexagons).map(hexagon => this.createHexagon(hexagon[1], hexagon[0])));\n    };\n\n    this.Demo = () => {\n      const onFinish = values => {\n        console.log(\"Success:\", values);\n      };\n\n      const onFinishFailed = errorInfo => {\n        console.log(\"Failed:\", errorInfo);\n      };\n\n      return /*#__PURE__*/React.createElement(Form, Object.assign({}, this.layout, {\n        name: \"basic\",\n        initialValues: {\n          remember: true\n        },\n        onFinish: onFinish,\n        onFinishFailed: onFinishFailed,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 7\n        }\n      }), /*#__PURE__*/React.createElement(Form.Item, {\n        label: \"Username\",\n        name: \"username\",\n        rules: [{\n          required: true,\n          message: \"Please input your username!\"\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Input, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }\n      })), /*#__PURE__*/React.createElement(Form.Item, {\n        label: \"Password\",\n        name: \"password\",\n        rules: [{\n          required: true,\n          message: \"Please input your password!\"\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Input.Password, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }\n      })), /*#__PURE__*/React.createElement(Form.Item, Object.assign({}, this.tailLayout, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(Button, {\n        type: \"primary\",\n        htmlType: \"submit\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 11\n        }\n      }, \"Submit\")));\n    };\n\n    this.hexagonAddForm = () => {\n      const addHexagon = values => {\n        // console.log(this.state.hexagonName, \"=====hexagone name ----\");\n        // console.log(\n        //   this.state.hexagonName,\n        //   this.state.startX,\n        //   this.state.startY,\n        //   \"----- hexagone details received ---\"\n        // );\n        console.log(values, \"----\"); // const { startX, startY, hexagonName } = this.state;\n        // if (startX && startY && hexagonName) {\n        //   const borders = [\n        //     { from: [startX, startY], to: [startX + 50, startY], colour: \"green\" },\n        //     { from: [startX + 50, startY], to: [startX + 100, startY + 50], colour: \"red\" },\n        //     { from: [startX + 100, startY + 50], to: [startX + 50, startY + 100], colour: \"yellow\" },\n        //     { from: [startX + 50, startY + 100], to: [startX, startY + 100], colour: \"pink\" },\n        //     { from: [startX, startY + 100], to: [startX - 50, startY + 50], colour: \"blue\" },\n        //     { from: [startX - 50, startY + 50], to: [startX, startY], colour: \"violet\" },\n        //   ];\n        //   console.log(\"-- updating cluster --\");\n        //   const newHexagon = { [hexagonName]: borders };\n        //   this.setState((state) => ({ hexagons: { ...state.hexagons, ...newHexagon } }));\n        // }\n        // else {\n        //   console.log(\"--hexagon details are required ---\");\n        // }\n      };\n\n      return /*#__PURE__*/React.createElement(Form, {\n        layout: \"vertical\",\n        name: \"hexagonAddForm\",\n        onFinish: addHexagon,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Form.Item, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Input, {\n        placeholder: \"Name of hexagon\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 13\n        }\n      })), /*#__PURE__*/React.createElement(Form.Item, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Input, {\n        name: \"statX\",\n        placeholder: \"X coordinate\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 13\n        }\n      })), /*#__PURE__*/React.createElement(Form.Item, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Input, {\n        name: \"startY\",\n        placeholder: \"Y coordinate\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 13\n        }\n      })), /*#__PURE__*/React.createElement(Form.Item, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        type: \"submit\",\n        htmlType: \"submit\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 13\n        }\n      }, \"Add Hexagon\"))));\n    };\n\n    this.hexagonRemoveForm = () => {\n      const removeHexagon = values => {\n        console.log(\"--values--\", values);\n      };\n\n      return /*#__PURE__*/React.createElement(Form, {\n        layout: \"vertical\",\n        name: \"hexagonRemoveForm\",\n        onFinish: removeHexagon,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Input, {\n        placeholder: \"Name of hexagon\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(Button, {\n        type: \"submit\",\n        htmlType: \"submit\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 11\n        }\n      }, \"Remove Hexagon\")));\n    };\n\n    const layout = {\n      labelCol: {\n        span: 8\n      },\n      wrapperCol: {\n        span: 16\n      }\n    };\n    const tailLayout = {\n      wrapperCol: {\n        offset: 8,\n        span: 16\n      }\n    };\n    this.state = {\n      hexagons: {}\n    };\n  }\n\n  componentDidMount() {\n    console.log(\"--current hexagon--\", this.state.hexagons);\n    Object.entries(this.state.hexagons).map(hexagon => {\n      console.log(hexagon, \"---hexagon --\");\n      return this.createHexagon(hexagon[1], hexagon[0]);\n    });\n  }\n\n  componentDidUpdate() {\n    console.log(\"--current hexagon after update--\", this.state.hexagons);\n    Object.entries(this.state.hexagons).map(hexagon => {\n      console.log(hexagon, \"---hexagon --\");\n      return this.createHexagon(hexagon[1], hexagon[0]);\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        color: \"blue\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 9\n      }\n    }, \" Hi There \"), this.createCluster());\n  }\n\n}\n\nexport default HexagonCluster;","map":{"version":3,"sources":["/Users/dbadsmac/Dev/personal/hexagons/hexagonss/src/components/HexagonCluster.jsx"],"names":["React","Component","Line","Form","Input","Row","Button","HexagonCluster","constructor","props","createHexagon","hexagonBorders","hexagonName","map","border","index","from","to","colour","removeHexagon","event","console","log","createCluster","Object","entries","state","hexagons","hexagon","Demo","onFinish","values","onFinishFailed","errorInfo","layout","remember","required","message","tailLayout","hexagonAddForm","addHexagon","hexagonRemoveForm","labelCol","span","wrapperCol","offset","componentDidMount","componentDidUpdate","render","color"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Line } from \"draw-shape-reactjs\";\nimport { Form, Input, Row, Button } from \"antd\";\n\nclass HexagonCluster extends Component {\n  constructor(props) {\n    super(props);\n    const layout = {\n      labelCol: { span: 8 },\n      wrapperCol: { span: 16 },\n    };\n\n    const tailLayout = {\n      wrapperCol: { offset: 8, span: 16 },\n    };\n    this.state = {\n      hexagons: {},\n    };\n  }\n\n  componentDidMount() {\n    console.log(\"--current hexagon--\", this.state.hexagons);\n    Object.entries(this.state.hexagons).map((hexagon) => {\n      console.log(hexagon, \"---hexagon --\");\n      return this.createHexagon(hexagon[1], hexagon[0]);\n    });\n  }\n\n  componentDidUpdate() {\n    console.log(\"--current hexagon after update--\", this.state.hexagons);\n    Object.entries(this.state.hexagons).map((hexagon) => {\n      console.log(hexagon, \"---hexagon --\");\n      return this.createHexagon(hexagon[1], hexagon[0]);\n    });\n  }\n\n  createHexagon = (hexagonBorders, hexagonName) => {\n    return (\n      <div key={hexagonName}>\n        {hexagonBorders.map((border, index) => (\n          <Line\n            key={`${hexagonName}-${index}`}\n            position=\"fixed\"\n            from={border.from}\n            to={border.to}\n            color={border.colour}\n          />\n        ))}\n      </div>\n    );\n  };\n\n  removeHexagon = (event) => {\n    console.log(\"-- removing hexagon --\", event);\n  };\n\n  createCluster = () => {\n    return (\n      <div key=\"villageCluster\">\n        {Object.entries(this.state.hexagons).map((hexagon) =>\n          this.createHexagon(hexagon[1], hexagon[0])\n        )}\n      </div>\n    );\n  };\n\n  Demo = () => {\n    const onFinish = (values) => {\n      console.log(\"Success:\", values);\n    };\n\n    const onFinishFailed = (errorInfo) => {\n      console.log(\"Failed:\", errorInfo);\n    };\n\n    return (\n      <Form\n        {...this.layout}\n        name=\"basic\"\n        initialValues={{\n          remember: true,\n        }}\n        onFinish={onFinish}\n        onFinishFailed={onFinishFailed}\n      >\n        <Form.Item\n          label=\"Username\"\n          name=\"username\"\n          rules={[\n            {\n              required: true,\n              message: \"Please input your username!\",\n            },\n          ]}\n        >\n          <Input />\n        </Form.Item>\n\n        <Form.Item\n          label=\"Password\"\n          name=\"password\"\n          rules={[\n            {\n              required: true,\n              message: \"Please input your password!\",\n            },\n          ]}\n        >\n          <Input.Password />\n        </Form.Item>\n\n        {/* <Form.Item {...tailLayout} name=\"remember\" valuePropName=\"checked\">\n          <Checkbox>Remember me</Checkbox>\n        </Form.Item> */}\n\n        <Form.Item {...this.tailLayout}>\n          <Button type=\"primary\" htmlType=\"submit\">\n            Submit\n          </Button>\n        </Form.Item>\n      </Form>\n    );\n  };\n\n  hexagonAddForm = () => {\n    const addHexagon = (values) => {\n      // console.log(this.state.hexagonName, \"=====hexagone name ----\");\n      // console.log(\n      //   this.state.hexagonName,\n      //   this.state.startX,\n      //   this.state.startY,\n      //   \"----- hexagone details received ---\"\n      // );\n\n      console.log(values, \"----\");\n\n      // const { startX, startY, hexagonName } = this.state;\n      // if (startX && startY && hexagonName) {\n      //   const borders = [\n      //     { from: [startX, startY], to: [startX + 50, startY], colour: \"green\" },\n      //     { from: [startX + 50, startY], to: [startX + 100, startY + 50], colour: \"red\" },\n      //     { from: [startX + 100, startY + 50], to: [startX + 50, startY + 100], colour: \"yellow\" },\n      //     { from: [startX + 50, startY + 100], to: [startX, startY + 100], colour: \"pink\" },\n      //     { from: [startX, startY + 100], to: [startX - 50, startY + 50], colour: \"blue\" },\n      //     { from: [startX - 50, startY + 50], to: [startX, startY], colour: \"violet\" },\n      //   ];\n      //   console.log(\"-- updating cluster --\");\n      //   const newHexagon = { [hexagonName]: borders };\n      //   this.setState((state) => ({ hexagons: { ...state.hexagons, ...newHexagon } }));\n      // }\n      // else {\n      //   console.log(\"--hexagon details are required ---\");\n      // }\n    };\n\n    return (\n      <Form layout=\"vertical\" name=\"hexagonAddForm\" onFinish={addHexagon}>\n        <Row>\n          <Form.Item>\n            <Input placeholder=\"Name of hexagon\" />\n          </Form.Item>\n          <Form.Item>\n            <Input name=\"statX\" placeholder=\"X coordinate\" />\n          </Form.Item>\n          <Form.Item>\n            <Input name=\"startY\" placeholder=\"Y coordinate\" />\n          </Form.Item>\n          <Form.Item>\n            <Button type=\"submit\" htmlType=\"submit\">\n              Add Hexagon\n            </Button>\n          </Form.Item>\n        </Row>\n      </Form>\n    );\n  };\n\n  hexagonRemoveForm = () => {\n    const removeHexagon = (values) => {\n      console.log(\"--values--\", values);\n    };\n    return (\n      <Form layout=\"vertical\" name=\"hexagonRemoveForm\" onFinish={removeHexagon}>\n        <Row>\n          <Input placeholder=\"Name of hexagon\" />\n          <Button type=\"submit\" htmlType=\"submit\">\n            Remove Hexagon\n          </Button>\n        </Row>\n      </Form>\n    );\n  };\n\n  render() {\n    return (\n      <div>\n        <span style={{ color: \"blue\" }}> Hi There </span>\n        {/* <Line key=\"0\" position=\"fixed\" from={[100, 100]} to={[150, 100]} color=\"green\" />\n        <Line key=\"1\" position=\"fixed\" from={[150, 100]} to={[200, 150]} color=\"red\" />\n        <Line key=\"2\" position=\"fixed\" from={[200, 150]} to={[150, 200]} color=\"yellow\" />\n        <Line key=\"3\" position=\"fixed\" from={[150, 200]} to={[100, 200]} color=\"pink\" />\n        <Line key=\"4\" position=\"fixed\" from={[100, 200]} to={[50, 150]} color=\"blue\" />\n        <Line key=\"5\" position=\"fixed\" from={[50, 150]} to={[100, 100]} color=\"violet\" /> */}\n        {/* {this.createHexagon({ startX: 100, startY: 100 })} */}\n\n        {this.createCluster()}\n\n        {}\n        {/* {this.hexagonAddForm()}\n        {this.hexagonRemoveForm()} */}\n      </div>\n    );\n  }\n}\n\nexport default HexagonCluster;\n"]},"metadata":{},"sourceType":"module"}